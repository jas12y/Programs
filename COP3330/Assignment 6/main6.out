Welcome to the PRIME NUMBER FINDER 
Enter a positive integer - The system will find all
Prime numbers up to and including that number

I N P U T->The bit array looks like this: 
( 00110101 00010100 01010001 00000101 00000100 
  01010000)

Primes less than 45:
2	3	5	7	11	13	17	19
23	29	31	37	41	43	
Now...Lets see if your comparison operator works. 
 We are going to have you enter another number to generate 
Prime numbers
Welcome to the PRIME NUMBER FINDER 
Enter a positive integer - The system will find all
Prime numbers up to and including that number

I N P U T->The bit array looks like this: 
( 00110101 00010100 01010001 00000101 00000100 
  01010000)
PRINTING THE PRIME NUMBERS

Primes less than 45:
2	3
5	7	11	13	17	19	23	29
31	37	41	43	
Checking the overload == operator 

They are equal

Checking the overload != operator 

They are NOT not equal

Checking the Unset member function by unsetting all bits
of the first array
NOTE: Only the bits up to and including the maximum value should be affected
( 00000000 00000000 00000000 00000000 00000000 
  00000000)

Now Checking the Set member function by setting all bits
of the first array
NOTE: Only the bits up to and including the maximum value should be affected
( 11111111 11111111 11111111 11111111 11111111 
  11111000)

Now Checking the Flip member function by flipping every other bit
of the first array starting with bit 0 (zero)
NOTE: Only the bits up to and including the maximum value should be affected
( 01010101 01010101 01010101 01010101 01010101 
  01010000)

Now Checking the Query member function
Printing out the number of the bits turned on.  Should be all odd numbers. 
NOTE: Only the bits up to and including the maximum value should be affected

    1     3     5     7     9 

   11    13    15    17    19 

   21    23    25    27    29 

   31    33    35    37    39 

   41    43 
Goodbye!
Deleting Bit Array 
Deleting Bit Array 
